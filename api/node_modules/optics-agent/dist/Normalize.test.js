"use strict";
var chai_1 = require('chai');
var graphql_tag_1 = require('graphql-tag');
var Normalize_1 = require('./Normalize');
var testQueries = [
    [
        'basic test',
        (_a = ["{\n            user {\n                name\n            }\n        }"], _a.raw = ["{\n            user {\n                name\n            }\n        }"], graphql_tag_1.default(_a)),
        '{user {name}}',
    ],
    [
        'basic test with query',
        (_b = ["query {\n            user {\n                name\n            }\n        }"], _b.raw = ["query {\n            user {\n                name\n            }\n        }"], graphql_tag_1.default(_b)),
        '{user {name}}',
    ],
    [
        'basic with operation name',
        (_c = ["query OpName {\n            user {\n                name\n            }\n        }"], _c.raw = ["query OpName {\n            user {\n                name\n            }\n        }"], graphql_tag_1.default(_c)),
        'query OpName {user {name}}',
    ],
    [
        'with various inline types',
        (_d = ["query OpName {\n            user {\n                name(apple: [[10]], cat: ENUM_VALUE, bag: {input: \"value\"})\n            }\n        }"], _d.raw = ["query OpName {\n            user {\n                name(apple: [[10]], cat: ENUM_VALUE, bag: {input: \"value\"})\n            }\n        }"], graphql_tag_1.default(_d)),
        'query OpName {user {name(apple:[], bag:{}, cat:ENUM_VALUE)}}',
    ],
    [
        'with various argument types',
        (_e = ["query OpName($c: Int!, $a: [[Boolean!]!], $b: EnumType) {\n            user {\n                name(apple: $a, cat: $c, bag: $b)\n            }\n        }"], _e.raw = ["query OpName($c: Int!, $a: [[Boolean!]!], $b: EnumType) {\n            user {\n                name(apple: $a, cat: $c, bag: $b)\n            }\n        }"], graphql_tag_1.default(_e)),
        'query OpName($a:[[Boolean!]!],$b:EnumType,$c:Int!) {user {name(apple:$a, bag:$b, cat:$c)}}',
    ],
    [
        'fragment',
        (_f = ["{\n            user {\n                name\n                ...Bar\n            }\n        }\n        fragment Bar on User {\n            asd\n        }\n        fragment Baz on User {\n            jkl\n        }"], _f.raw = ["{\n            user {\n                name\n                ...Bar\n            }\n        }\n        fragment Bar on User {\n            asd\n        }\n        fragment Baz on User {\n            jkl\n        }"], graphql_tag_1.default(_f)),
        '{user {name ...Bar}} fragment Bar on User {asd}',
    ],
    [
        'full test',
        (_g = ["query Foo ($b: Int, $a: Boolean){\n            user(name: \"hello\", age: 5) {\n                ... Bar\n                ... on User {\n                    hello\n                    bee\n                }\n                tz\n                aliased: name\n            }\n        }\n        fragment Baz on User {\n            asd\n        }\n        fragment Bar on User {\n            age @skip(if: $a)\n            ...Nested\n        }\n        fragment Nested on User {\n            blah\n        }"], _g.raw = ["query Foo ($b: Int, $a: Boolean){\n            user(name: \"hello\", age: 5) {\n                ... Bar\n                ... on User {\n                    hello\n                    bee\n                }\n                tz\n                aliased: name\n            }\n        }\n        fragment Baz on User {\n            asd\n        }\n        fragment Bar on User {\n            age @skip(if: $a)\n            ...Nested\n        }\n        fragment Nested on User {\n            blah\n        }"], graphql_tag_1.default(_g)),
        'query Foo($a:Boolean,$b:Int) {user(age:0, name:"") {name tz ...Bar ... on User {bee hello}}}' +
            ' fragment Bar on User {age @skip(if:$a) ...Nested} fragment Nested on User {blah}',
    ],
];
describe('normalizeQuery', function () {
    testQueries.forEach(function (_a) {
        var testName = _a[0], inputDocument = _a[1], outString = _a[2];
        it(testName, function () {
            var fragments = {};
            var operation = null;
            inputDocument.definitions.forEach(function (def) {
                if (def.kind === 'OperationDefinition') {
                    operation = def;
                }
                if (def.kind === 'FragmentDefinition') {
                    fragments[def.name.value] = def;
                }
            });
            var fakeInfo = {
                operation: operation,
                fragments: fragments,
            };
            var normalized = Normalize_1.normalizeQuery(fakeInfo);
            // console.log(normalized);
            chai_1.assert.equal(normalized, outString, 'normalize');
        });
    });
});
var _a, _b, _c, _d, _e, _f, _g;
//# sourceMappingURL=Normalize.test.js.map